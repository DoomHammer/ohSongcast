ohSongcast can be used to provide a virtual soundcard which sends a device's
audio output to another device which implements the OpenHome Receiver service
(http://wiki.openhome.org/wiki/Av:Developer:ReceiverService).

Full versions exist for Windows (7 onwards) and Mac OSX (Lion onwards).
Much of the code builds for other platforms but without integration their audio subsystems.

The code can be built for Windows, Mac or Linux and requires:
- Python v2.7
- MSVC (Windows)
- GCC (Linux)
- Clang (Mac)
- ohNet (https://github.com/openhome/ohNet.git)
- ohdevtools (https://github.com/openhome/ohdevtools.git)
- ohNetGenerated (https://github.com/openhome/ohNetGenerated.git)
- ohNetmon (https://github.com/openhome/ohNetmon.git)
- ohTopology (https://github.com/openhome/ohTopology.git)

All code must be cloned to the same root directory and can then be built using:

cd ohNet
make ohNetCore proxies devices TestFramework ohNet.net.dll
cd ../ohNetGenerated
./go fetch --all
make
cd ../ohNetmon
./go fetch --all
./waf configure --ohnet=../ohNet
./waf build
cd ../ohTopology
./go fetch --all
./waf configure --ohnet=../ohNet
./waf build
cd ../ohSongcast
make release=1

and for a debug build:

cd ohNet
make ohNetCore proxies devices TestFramework ohNet.net.dll debug=1
cd ../ohNetGenerated
./go fetch --all	### note the missing '--debug' argument is intentional
make debug=1
cd ../ohNetmon
./go fetch --all --debug
./waf configure --ohnet=../ohNet --debug
./waf build
cd ../ohTopology
./go fetch --all --debug
./waf configure --ohnet=../ohNet --debug
./waf build
cd ../ohSongcast
make debug=1
